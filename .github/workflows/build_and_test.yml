name: "Build & Test"

on:
  push:
    branches:
      - master
      - branch-DDS-3.*
      - gh_wf_*
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "pull_request.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/**'
      - '!**.md'
      - '!**.rst'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  pull_request:
    branches:
      - master
      - branch-DDS-3.*
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "push.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/**'
      - '!**.md'
      - '!**.rst'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TRIGGERING_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:

  ACE_TAO_w19_re_o1p1_sec:

    runs-on: windows-2019

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: get compiler version
      shell: bash
      run: |
        export COMPILER_VERSION=$("C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -property catalog_productDisplayVersion)
        echo "COMPILER_VERSION=$COMPILER_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.COMPILER_VERSION }}
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --ipv6 --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Release,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Release,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: ACE_TAO_w19_re_o1p1_sec

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_o1p1_sec_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - uses: ammaraskar/msvc-problem-matcher@0.1
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --ipv6 --rapidjson --security --gtest=%GITHUB_WORKSPACE%/OpenDDS/tests/googletest/build/install --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Release,Platform=x64 -m DDS_no_tests.sln
    - name: gitclean
      shell: bash
      run: |
        touch output.txt
        cd OpenDDS
        git clean -nd -e ext | tee ../output.txt
        if [ -s ../output.txt ]; then exit 1; fi
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  messenger_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec
    timeout-minutes: 40

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_o1p1_sec_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_o1p1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Release,Platform=x64 -m Messenger.sln
    - name: build C++11 messenge test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Release,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_MESSENGER -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=tests/auto_run_tests.pl,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  compiler_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec
    timeout-minutes: 30

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_o1p1_sec_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_o1p1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: build compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_COMPILER -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=tests/auto_run_tests.pl,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  unit_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec
    timeout-minutes: 150

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_o1p1_sec_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_o1p1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: build unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        msbuild -p:Configuration=Release,Platform=x64 -m UnitTests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_UNIT -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=tests/auto_run_tests.pl,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi


  wireshark_w19-release:

    runs-on: windows-2019

    steps:
    - name: checkout Wireshark
      shell: cmd
      run: |
        git clone -q -b release-3.4 --depth=1 https://gitlab.com/wireshark/wireshark.git
        cd wireshark
        for /f %%x in ('git rev-parse HEAD') do @echo WIRESHARK_COMMIT=%%x>> %GITHUB_ENV%
    - name: get compiler version
      shell: bash
      run: |
        export COMPILER_VERSION=$("C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -property catalog_productDisplayVersion)
        echo "COMPILER_VERSION=$COMPILER_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_${{ env.WIRESHARK_COMMIT }}_${{ env.COMPILER_VERSION }}
    - name: install vcpkg packages
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      id: runvcpkg
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg-qt'
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse qt5-winextras qt5-tools qt5-svg qt5-multimedia qt5-declarative
        vcpkgTriplet: x64-windows
    - name: checkout WinFlexBison
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: lexxmark/winflexbison
        path: winflexbison
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: build WinFlexBison
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsTxtPath: winflexbison/CMakeLists.txt
    - name: set Wireshark environment
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        echo WIRESHARK_LIB_DIR=%CD%\wireshark-win64-libs-3.4>> %GITHUB_ENV%
        echo QT5_BASE_DIR=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}\installed\x64-windows>> %GITHUB_ENV%
        type %GITHUB_ENV%
    - name: build Wireshark
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsTxtPath: wireshark/CMakeLists.txt
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        buildDirectory: ${{ github.workspace }}/wsbuild
        cmakeAppendedArgs: '-GNinja -DLEX_EXECUTABLE=${{ github.workspace }}\winflexbison\bin\Debug\win_flex.exe -DYACC_EXECUTABLE=${{ github.workspace }}\winflexbison\bin\Debug\win_bison.exe'
        buildWithCMakeArgs: '-t epan'
    - name: create Wireshark artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        find -iname "*\.obj" -delete
        tar cvhf ${{ github.job }}.tar wireshark wsbuild wireshark-win64-libs-3.4
        xz -3 ${{ github.job }}.tar
    - name: upload Wireshark artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  ACE_TAO_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: get compiler version
      shell: bash
      run: |
        export COMPILER_VERSION=$("C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -property catalog_productDisplayVersion)
        echo "COMPILER_VERSION=$COMPILER_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.COMPILER_VERSION }}
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --java --no-built-in-topics --rapidjson --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Release,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Release,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: [ACE_TAO_w19_re_j_ws_FM-1f, wireshark_w19-release]

    steps:
    - name: download Wireshark artifact
      uses: actions/download-artifact@v2
      with:
        name: wireshark_w19-release_artifact
    - name: extract Wireshark artifact
      shell: bash
      run: |
        tar xvJf wireshark_w19-release.tar.xz
        rm -f wireshark_w19-release.tar.xz
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: set up MSVC problem matcher
      uses: ammaraskar/msvc-problem-matcher@0.1
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --java --no-built-in-topics --rapidjson --gtest=%GITHUB_WORKSPACE%/OpenDDS/tests/googletest/build/install --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --wireshark-cmake=%GITHUB_WORKSPACE%\wireshark --wireshark-build=%GITHUB_WORKSPACE%\wsbuild --wireshark-lib=run --glib=%GITHUB_WORKSPACE%\wireshark-win64-libs-3.4\vcpkg-export-20190318-win64ws\installed\x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Release,Platform=x64 -m DDS_no_tests.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  messenger_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f
    timeout-minutes: 40

    steps:
    - name: install xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: build messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Release,Platform=x64 -m Messenger.sln
    - name: build C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Release,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_MESSENGER -Config RTPS -Config WIN64 -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=tests/auto_run_tests.pl,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  compiler_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f
    timeout-minutes: 30

    steps:
    - name: install xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: build compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_COMPILER -Config RTPS -Config WIN64 -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=tests/auto_run_tests.pl,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  unit_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f
    timeout-minutes: 150

    steps:
    - name: install xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
        vcpkgArguments: --recurse xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: check GTest Path
      shell: cmd
      run: |
        cd D:\a\OpenDDS\OpenDDS\OpenDDS\tests\googletest\build\install\
        dir
        cd lib
        dir
    - name: build unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        msbuild -p:Configuration=Release,Platform=x64 -m UnitTests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\static_ci_tests.lst -Config STATIC_UNIT -Config RTPS -Config WIN64 -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=tests/auto_run_tests.pl,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

